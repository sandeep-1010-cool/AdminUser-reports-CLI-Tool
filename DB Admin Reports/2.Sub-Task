### Worker Lambda for DB Admin Access Data Collection

#### Overview
- Purpose: Independently connect to databases in individual AWS accounts to collect administrator access info.
- Outcome: Comprehensive admin user data collection across all databases in an account, with resilience to individual account issues.

---

### Requirements & Features

#### 1. General
- Language & Runtime:
  - TypeScript
  - Node.js runtime

#### 2. Database Connectivity
- Supports connections to both:
  - MSSQL
  - MySQL
- Uses appropriate database drivers.
- Supports databases hosted on:
  - RDS instances
  - EC2-hosted databases
- Validates connectivity to databases before executing queries.
- Implements connection pooling for handling multiple databases within the same account concurrently.

#### 3. Credentials & Security
- Uses pre-configured read-only database credentials retrieved securely from AWS Secrets Manager.
- Protects against SQL injection.
- Performs input validation.

#### 4. Data Collection
- Executes SQL queries to retrieve:
  - Username
  - Role name
  - Permissions level
  - Last login date
  - Account details
- Formats collected data into structured JSON including timestamp metadata.

#### 5. Error Handling & Reliability
- Handles database connection failures using exponential backoff retries (max 3 retries).
- Implements timeout protection to prevent long-running executions.
- Properly cleans up connections/resources after usage.

#### 6. Reporting & Communication
- Uploads collected results to a central S3 bucket using cross-account IAM roles.
- Responds back to the master orchestrator with:
  - Execution status (success/failure)
  - Location of results in S3

#### 7. Logging & Monitoring
- Logs all database operations, connection attempts, and errors to CloudWatch Logs.

#### 8. Concurrency & Performance
- Can process multiple databases concurrently within the same AWS account.

---

### High-Level Workflow

1. **Initialization**
   - Fetch read-only DB credentials from Secrets Manager.
   - Validate database connectivity.

2. **Connection Management**
   - Utilize connection pooling for efficient handling of multiple DBs.
   - Implement connection retries with exponential backoff (max 3 retries).

3. **Data Retrieval**
   - Execute predefined SQL queries to collect admin user data.
   - Ensure SQL injection protection and validate inputs.

4. **Data Formatting**
   - Convert retrieved data into structured JSON format.
   - Append timestamp metadata.

5. **Reporting**
   - Upload JSON results to a central S3 bucket using cross-account IAM role.
   - Return status and S3 location to the master orchestrator.

6. **Cleanup**
   - Close all DB connections and clean up resources properly.

7. **Logging**
   - Log all relevant information to CloudWatch for monitoring and troubleshooting.

---
